# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Author {
  biography: String!
  createdAt: DateTime!
  dateOfBirth: DateTime!
  dateOfDeath: DateTime
  id: Int!
  imageUrl: String
  name: String!
  nationality: String!
  updatedAt: DateTime!
}

type Book {
  category: Category!
  coverImageUrl: String
  createdAt: DateTime!
  description: String!
  id: Int!
  isActive: Boolean!
  isbn: String!
  language: String!
  page: Float!
  price: Float!
  publicationDate: DateTime!
  publisher: Publisher!
  stockQuantity: Float!
  title: String!
  updatedAt: DateTime!
}

type BookAuthor {
  author: Author!
  book: Book!
  id: Int!
}

type Category {
  createdAt: DateTime!
  description: String
  id: Int!
  isActive: Boolean!
  name: String!
  slug: String!
  updatedAt: DateTime!
}

input CreateAuthorInput {
  biography: String!
  dateOfBirth: DateTime!
  dateOfDeath: DateTime
  imageUrl: String
  name: String!
  nationality: String!
}

input CreateBookAuthorInput {
  authorId: Int!
  bookId: Int!
}

input CreateBookInput {
  categoryId: Int!
  coverImageUrl: String
  description: String!
  isActive: Boolean!
  isbn: String!
  language: String!
  page: Float!
  price: Float!
  publicationDate: DateTime!
  publisherId: Int!
  stockQuantity: Float!
  title: String!
}

input CreateCategoryInput {
  description: String!
  isActive: Boolean!
  name: String!
  slug: String!
}

input CreatePublisherInput {
  address: String
  email: String
  isActive: Boolean
  name: String!
  phone: String
}

input CreateUserInput {
  address: String!
  avatar: String
  email: String!
  first_name: String!
  is_banned: Boolean
  last_name: String!
  note: String
  password: String!
  phone: String
  role: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type LogoutResponse {
  message: String!
}

type Mutation {
  createAuthor(createAuthorInput: CreateAuthorInput!): Author!
  createBook(createBookInput: CreateBookInput!): Book!
  createBookAuthor(createBookAuthorInput: CreateBookAuthorInput!): BookAuthor!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  createPublisher(createPublisherInput: CreatePublisherInput!): Publisher!
  createUser(createUserInput: CreateUserInput!): User!
  login(input: LoginInput!): LoginResponse!
  logout: LogoutResponse!
  logoutAll: LogoutResponse!
  refreshTokens(refreshToken: String!): RefreshResponse!
  register(input: RegisterInput!): RegisterResponse!
  removeAuthor(id: Int!): Author!
  removeBook(id: Int!): Book!
  removeBookAuthor(id: Int!): BookAuthor!
  removeCategory(id: Int!): Category!
  removePublisher(id: Int!): Publisher!
  removeUser(id: Int!): User!
  updateAuthor(updateAuthorInput: UpdateAuthorInput!): Author!
  updateBook(updateBookInput: UpdateBookInput!): Book!
  updateBookAuthor(updateBookAuthorInput: UpdateBookAuthorInput!): BookAuthor!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  updatePublisher(updatePublisherInput: UpdatePublisherInput!): Publisher!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Publisher {
  address: String
  email: String
  id: Int!
  isActive: Boolean
  name: String!
  phone: String
}

type Query {
  author(id: Int!): Author!
  authors: [Author!]!
  book(id: Int!): Book!
  bookAuthor(id: Int!): BookAuthor!
  bookAuthors: [BookAuthor!]!
  books: [Book!]!
  categories: [Category!]!
  category(id: Int!): Category!
  me: User!
  publisher(id: Int!): Publisher!
  publishers: [Publisher!]!
  user(id: Int!): User!
  users: [User!]!
}

type RefreshResponse {
  accessToken: String!
}

input RegisterInput {
  email: String!
  first_name: String!
  last_name: String!
  password: String!
}

type RegisterResponse {
  user: User!
}

input UpdateAuthorInput {
  biography: String
  dateOfBirth: DateTime
  dateOfDeath: DateTime
  id: Int!
  imageUrl: String
  name: String
  nationality: String
}

input UpdateBookAuthorInput {
  authorId: Int
  bookId: Int
  id: Int!
}

input UpdateBookInput {
  categoryId: Int
  coverImageUrl: String
  description: String
  id: Int!
  isActive: Boolean
  isbn: String
  language: String
  page: Float
  price: Float
  publicationDate: DateTime
  publisherId: Int
  stockQuantity: Float
  title: String
}

input UpdateCategoryInput {
  description: String
  id: Int!
  isActive: Boolean
  name: String
  slug: String
}

input UpdatePublisherInput {
  address: String
  email: String
  id: Int!
  isActive: Boolean
  name: String
  phone: String
}

input UpdateUserInput {
  address: String
  avatar: String
  email: String
  first_name: String
  id: Int!
  is_banned: Boolean
  last_name: String
  note: String
  password: String
  phone: String
  role: String
}

type User {
  address: String
  createdAt: DateTime!
  email: String!
  first_name: String!
  id: Int!
  is_banned: Boolean
  last_name: String!
  note: String
  phone: String
  role: String!
  updatedAt: DateTime!
}